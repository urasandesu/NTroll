<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Urasandesu.NAnonym" #>
<#@ import namespace="Urasandesu.NAnonym.Linq" #>
<#@ import namespace="Urasandesu.NTroll.FormulaSample5.Formulas" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Documents and Settings\Administrator\NAnonym\Bin\Debug\Urasandesu.NAnonym.dll" #>
<#@ assembly name="C:\Documents and Settings\Administrator\NTroll\Urasandesu.NTroll.FormulaSample5\bin\Debug\Urasandesu.NTroll.FormulaSample5.dll" #>
<#+

public class FormulaTemplate : Template
{
	public FormulaTemplate()
		: base()
	{
		TemplateProperties = new List<FormulaTemplateProperty>();
	}
	
	public string BaseTypeName { get; set; }
	public string TypeName { get; set; }
	public bool IsAbstract { get; set; }
	public NodeType NodeType { get; set; }
	public List<FormulaTemplateProperty> TemplateProperties { get; set; }
	
	public override string TransformText()
	{
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Urasandesu.NAnonym.ILTools;

namespace Urasandesu.NTroll.FormulaSample5.Formulas
{
    public <#= IsAbstract ? "abstract " : "" #>partial class <#= TypeName #> <#= BaseTypeName == null ? "" : ": " + BaseTypeName #>
    {
        public <#= TypeName #>()
            : base()
        {
<#+ 
		if (BaseTypeName != null)
		{
#>
			NodeType = NodeType.<#= NodeType.ToString() #>;
<#+ 
		}
#>
<#+ 
			foreach (var property in TemplateProperties)
			{
#>
			<#= property.Name #> = <#= property.Default #>;
<#+ 
			}
#>
        }

<#+ 
		foreach (var property in TemplateProperties)
		{
#>
        <#= property.TypeName #> <#= property.Name.ToCamel() #>;
        public <#= property.TypeName #> <#= property.Name #> 
		{ 
			get { return <#= property.Name.ToCamel() #>; } 
			set { <#= property.Name.ToCamel() #> = CheckCanModify(value); } 
		}
<#+ 
			if (property.HasDefaultExpandString)
			{
#>
		public abstract string <#= property.Name #>DefaultExpandString { get; }
<#+ 
			}
#>
<#+ 
		}
		
		if (!IsAbstract)
		{
#>
        public override Formula Accept(IFormulaVisitor visitor)
        {
			return visitor.Visit(this);
        }
<#+ 
		}
#>
		
        public <#= BaseTypeName == null ? "virtual" : "override" #> void AppendTo(StringBuilder sb)
		{
<#+  
		if (!IsAbstract)
		{
#>
			sb.Append("{");
<#+ 
		}
#>
<#+ 
		if (BaseTypeName != null)
		{
#>
			base.AppendTo(sb);
<#+ 
		}
#>
<#+ 
		TemplateProperties.Where(_ => !_.ProhibitsExpandString).ForEach(
		(property, propertyIndex) =>
		{
			if (BaseTypeName != null || 0 < propertyIndex)
			{
#>
			sb.Append(", ");
<#+
			}			
			WriteAppendingProperty(property);
		});
#>
<#+  
		if (!IsAbstract)
		{
#>
			sb.Append("}");
<#+ 
		}
#>
		}
    }
}

<#+
		
        return this.GenerationEnvironment.ToString();
	}
	
	void WriteAppendingProperty(FormulaTemplateProperty property)
	{
#>
			sb.Append("\"<#= property.Name #>\": ");
<#+ 
		if (-1 < property.TypeName.IndexOf("Formula"))
		{
#>
            if (<#= property.Name #> == null)
            {
                sb.Append("null");
            }
            else
            {
                <#= property.Name #>.AppendTo(sb);
            }
<#+  
		}
		else
		{
#>
<#+ 
			if (!property.HasDefaultExpandString)
			{
#>
			AppendValueTo(<#= property.Name #>, sb);
<#+ 
			}
			else
			{
#>
			AppendValueTo(<#= property.Name #>, sb, <#= property.Name #>DefaultExpandString);
<#+ 
			}
#>
<#+ 
		}
#>
<#+ 
	}
}
#>

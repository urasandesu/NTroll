<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#+
public class FormulaAdapterTemplate : Template
{
    public FormulaAdapterTemplate(Dictionary<string, FormulaTemplate> template)
    {
        Templates = template;
    }

    public Dictionary<string, FormulaTemplate> Templates { get; private set; }
    
    public override string TransformText()
    {
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Urasandesu.NTroll.FormulaSample5.Formulas
{
    public abstract class FormulaAdapter : IFormulaVisitor
    {
        IFormulaVisitor visitor;
        public FormulaAdapter(IFormulaVisitor visitor)
        {
            this.visitor = visitor;
        }
<#+ 
        foreach (var template in Templates)
        {
#>
        public virtual Formula Visit(<#= template.Value.TypeName #> formula)
        {
<#+ 
			if (template.Value.BaseTypeName != "INotifyPropertyChanged")
			{
#>
            Visit((<#= template.Value.BaseTypeName #>)formula);
<#+ 
			}
#>
<#+ 
			foreach (var property in template.Value.TemplateProperties.Where(_ => !_.ProhibitsDefaultAccepting && -1 < _.TypeName.IndexOf("Formula")))
			{
#>
            if (formula.<#= property.Name #> != null) formula.<#= property.Name #>.Accept(this);
<#+ 
			}
#>
            return visitor.Visit(formula);
        }
<#+ 
        }
#>
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }
	
	IEnumerable<FormulaTemplateProperty> GetDefaultAcceptingProperties(FormulaTemplate template)
	{
		var properties = Enumerable.Empty<FormulaTemplateProperty>();
		if (Templates.ContainsKey(template.BaseTypeName))
		{
			properties = properties.Concat(GetDefaultAcceptingProperties(Templates[template.BaseTypeName]));
		}
		return properties.Concat(template.TemplateProperties.Where(_ => !_.ProhibitsDefaultAccepting && -1 < _.TypeName.IndexOf("Formula")));
	}
}
#>
